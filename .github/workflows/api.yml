name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12.4
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.4"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest requests Flask
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Get commit info and files
      id: commit_info
      run: |
        # Récupérer les informations sur le commit
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        COMMIT_DATE=$(git log -1 --pretty=format:"%ad")
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
        
        # Récupérer les fichiers modifiés dans le commit
        MODIFIED_FILES=$(git show --name-status --pretty="" HEAD)
        
        # Stocker toutes les informations dans les variables d'environnement
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV

    - name: Run Flask API in the background
      run: |
        nohup python app.py &

    - name: Wait for Flask to start
      run: sleep 10  # Attendre 10 secondes avant de tester l'API

    - name: Test the Classification API
      run: |
        curl -X POST http://127.0.0.1:5000/predict/classification \
          -H "Content-Type: application/json" \
          -d '{
            "features": {
              "Year": 2024,
              "Month": 6,
              "Day": 25,
              "Author": "${{ env.COMMIT_AUTHOR }}",
              "message": "${{ env.COMMIT_MESSAGE }}",
              "modified_files": "${{ env.MODIFIED_FILES }}",
              "functions": "test_inspect_metric test_inspect_dataset"
            }
          }'
