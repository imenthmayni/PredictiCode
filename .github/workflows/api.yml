name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12.4"

      - name: Install dependencies
        working-directory: ./api1
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8  # Installer flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Get commit info and files
        id: commit_info
        run: |
          $COMMIT_AUTHOR = git log -1 --pretty=format:"%an"
          $COMMIT_DATE = git log -1 --pretty=format:"%ad"
          $COMMIT_MESSAGE = git log -1 --pretty=format:"%s"
          $MODIFIED_FILES = git diff-tree --no-commit-id --name-only -r HEAD | tr '\n' ', '
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $env:GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $env:GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $env:GITHUB_ENV
          echo "MODIFIED_FILES=$MODIFIED_FILES" >> $env:GITHUB_ENV

      - name: Run Flask API in the background
        working-directory: ./api1
        run: |
          Start-Process python -ArgumentList "app.py" # Exécuter Flask en arrière-plan

      - name: Wait for Flask to start
        run: sleep 10  # Attendre que l'API démarre

      - name: Test the Classification API
        run: |
          curl -X POST http://127.0.0.1:5000/predict/classification ^
            -H "Content-Type: application/json" ^
            -d "{
              \"features\": {
                \"Year\": 2024,
                \"Month\": 12,
                \"Day\": 3,
                \"Author\": \"${{ env.COMMIT_AUTHOR }}\",
                \"message\": \"${{ env.COMMIT_MESSAGE }}\",
                \"modified_files\": \"${{ env.MODIFIED_FILES }}\",
                \"functions\": \"test_function1 test_function2\"
              }
            }"
