name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Étape 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configuration de Python
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12.4"

      # Étape 3 : Installation des dépendances
      - name: Install dependencies
        working-directory: ./api1
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 4 : Exécuter des tests unitaires (ajoutez vos propres tests ici si nécessaire)
      - name: Run tests
        working-directory: ./api1
        run: |
          python -m unittest discover -s tests

      # Étape 5 : Démarrage du serveur Flask en arrière-plan
      - name: Run Flask API in the background
        working-directory: ./api1
        run: |
          start /B python app.py

      # Étape 6 : Attente pour que Flask démarre correctement
      - name: Wait for Flask to start
        run: timeout /t 10

      # Étape 7 : Tester l'API Classification avec curl
      - name: Test the Classification API
        shell: bash
        working-directory: ./api1
        run: |
          curl --request POST http://127.0.0.1:5000/predict/classification \
            --header "Content-Type: application/json" \
            --data '{
              "features": {
                "Year": 2024,
                "Month": 12,
                "Day": 3,
                "Author": "${{ env.COMMIT_AUTHOR }}",
                "message": "${{ env.COMMIT_MESSAGE }}",
                "modified_files": "${{ env.MODIFIED_FILES }}",
                "functions": "test_function1 test_function2"
              }
            }'

      # Étape 8 : Extraire les informations du commit
      - name: Get commit info and files
        id: commit_info
        run: |
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_DATE=$(git log -1 --pretty=format:"%ad")
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          MODIFIED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | tr '\n' ', ')
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV

      # Étape 9 : Debugger le démarrage de Flask (optionnel)
      - name: Debug Flask API
        run: curl http://127.0.0.1:5000
